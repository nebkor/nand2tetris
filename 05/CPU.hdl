// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // instruction decoding
    And16(a=instruction, b=true,
    out[0..2]=jbits, // jmp bits
    out[3]=d3, out[4]=d2, out[5]=d1, // dst bits
    out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, out[12]=ca,
    out[15]=iscinstruction);
    Not(in=instruction[15], out=isainstruction);

    // Where will the ALU output be stored?
    Or(a=isainstruction, b=d1, out=loadrega);
    And(a=iscinstruction, b=d2, out=loadregd);
    And(a=iscinstruction, b=d3, out=writeM);

    Mux16(a=aluout, b=instruction, sel=isainstruction, out=instoraluout);
    Mux16(a=aregout, b=inM, sel=ca, out=aorinm);

    // See figures 2.6 and 4.3 in the textbook for why the inputs are as they are.
    ALU(x=dregout, y=aorinm,
    zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
    zr=outiseq, ng=outislt, out=aluout, out=outM);

    // manage ALU outputs for determining jump conditions
    Not(in=outislt, out=outisge);
    Not(in=outiseq, out=outisne);
    And(a=outisne, b=outisge, out=outisgt);
    Or(a=outiseq, b=outislt, out=outisle);

    // do we jump?
    DMux8Way(in=true, sel=jbits, a=nojmp,
    b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    And(a=jgt, b=outisgt, out=dojgt);
    And(a=jeq, b=outiseq, out=dojeq);
    And(a=jge, b=outisge, out=dojge);
    And(a=jlt, b=outislt, out=dojlt);
    And(a=jne, b=outisne, out=dojne);
    And(a=jle, b=outisle, out=dojle);
    Or8Way(in[0]=dojgt, in[1]=dojeq, in[2]=dojge, in[3]=dojlt, in[4]=dojne, in[5]=dojle, in[6]=jmp, in[7]=false,
    out=maybejump);

    And(a=maybejump, b=iscinstruction, out=dojump);
    Not(in=dojump, out=dopcinc);
    PC(reset=reset, in=aregout, load=dojump, inc=dopcinc, out[0..14]=pc);

    DRegister(in=aluout, load=loadregd, out=dregout);
    ARegister(in=instoraluout, load=loadrega, out=aregout, out[0..14]=addressM);
}
