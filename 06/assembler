#lang racket

;; utility functions
(define (member? x lst)
  (let ([res (member x lst)])
    (if (eqv? #f res)
        #f
        #t)))

(define (safe-hash-set hash key val)
  (if (hash-has-key? hash key)
      hash
      (hash-set hash key val)))

;; regexes for our stuff
(define COMMENTS #px"[\\W]{0,}//.*")
(define LABEL #px"\\([a-zA-Z0-9_]+\\)")
(define VAR #px"@[a-zA-Z0-9_]")
(define NUM #px"^[0-9]+$")

(define (decode-ainstr inst)
  (let ([v (car (string-split inst "@"))])
    (if (regexp-match NUM v)
        (string->number v)
        v)))

(define (get-label x)
  (string-trim (string-trim x "(") ")"))

(define (get-builtins-assoc)
  (let ([registers (for/list ([i 15])
                     (cons (~a "R" i) i))]
        [misc '(("SP" . 0)
                ("LCL" . 1)
                ("ARG" . 2)
                ("THIS" . 3)
                ("THAT" . 4)
                ("SCREEN" . 16384)
                ("KBD" . 24576))])
    (append registers misc)))



(define (strip-asm asmlist)
  (filter (λ (x) (non-empty-string? x))
          (for/list ([l (in-list asmlist)])
            (string-trim (regexp-replace COMMENTS l "")))))

(define (build-symtable asmlist)
  (define (find-labels)
    (map get-label
         (filter (λ (x) (regexp-match LABEL x)) asmlist)))
  (let ([labels (find-labels)])
    (let loop ([st (make-immutable-hash (get-builtins-assoc))]
               [asmlist asmlist]
               [n 0]
               [vn 16])
      (if (null? asmlist)
          st
          (let ([line (car asmlist)]
                [rest (cdr asmlist)]
                [nextn (add1 n)])
            (cond
             [(regexp-match VAR line)
              (let ([v (decode-ainstr line)])
                (cond
                 [(number? v) ;; line is like "@10"
                  (loop st rest nextn vn)]
                 [(member? v labels) ;; the "@FOO" refers to "(FOO)"
                  (loop st rest nextn vn)]
                 [else
                  (let ([old? (hash-has-key? st v)]) ;; check to see if we've seen @foo before
                    (loop (safe-hash-set st v vn) rest nextn (if old? vn (add1 vn))))]))]
             [(regexp-match LABEL line)
              (let ([v (get-label line)])
                (loop (safe-hash-set st v n) rest n vn))]
             [else
              (loop st rest nextn vn)]))))))

(define (desymify asmlist symtable)
  #t)

(define (translate asm)
  '("111000" "000111"))

(define (write-hackfile contents hackfile)
  (with-output-to-file hackfile
    (λ ()
      (begin
        (printf contents)
        (newline)))
    #:exists 'replace))

(define (assemble asmfile)
  (let* ([asmlist (strip-asm (file->lines asmfile))]
         [symtable (build-symtable asmlist)]
         [nosymasm (desymify asmlist symtable)]
         [binarylist (translate nosymasm)]
         [bstring (string-join binarylist "\n")]
         [hackfile (regexp-replace #rx"\\.asm$" asmfile ".hack")])
    (write-hackfile bstring hackfile)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(module+ main
  (require racket/cmdline)
  (command-line
   #:program "assembler"
   #:args (asmfile)
   (assemble asmfile)))
